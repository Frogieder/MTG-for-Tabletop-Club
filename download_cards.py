import sqlite3
import os
import requests
import shutil

if not os.path.exists("./generated_packs"):
    os.makedirs("./generated_packs")

pack_name = input("Enter the pack name:")
#"""
# Check if pack exists
if os.path.exists(f"./generated_packs/{pack_name}"):
    print("Directory exists. Purge it? [y/N]")
    if input().lower() != "y":
        print("Operation cancelled by user")
        exit(0)
    else:
        shutil.rmtree(f"./generated_packs/{pack_name}")

# os.makedirs(f"./generated_packs/{pack_name}")
os.makedirs(f"./generated_packs/{pack_name}/cards")

# This part may be commented for development
#"""
# Read the deck
cards = []
empty_lines = 0
print("Write newline-separated decklist, end it with several newlines:")
while empty_lines < 3:
    line = input()
    if line == "":
        empty_lines -= - 1
        continue
    empty_lines = 0
    cards.append(line)

print("Reading done")

connection = sqlite3.connect("../cards.sqlite")


def get_uri(name):
    cursor = connection.cursor()
    cursor.execute("SELECT image_uris FROM images WHERE name = ?", (name,))
    result = cursor.fetchone()
    cursor.close()
    return result[0] if result else None


decklist = []
sideboard = []
# Downlaod all cards
sideboadring = False
for card in cards:
    print(card)
    if card.lower() in ("[sideboard]", "sideboard"):
        sideboadring = True
    if card.lower() in ("deck",):
        continue
    if card[0] in ("[",):
        continue
    if card[0] in ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"):
        count, card = card.split(" ", 1)
        count = int(count)
    else:
        count = 1
    if sideboadring:
        sideboard.append((card, count))
        count = 0
    decklist.append((card, count))

    # This part may be commented for decelopmnet
    #"""
    r = requests.get(get_uri(card))
    with open(f"./generated_packs/{pack_name}/cards/" + card.replace("/", "__") + ".jpeg", 'wb') as file:
        file.write(r.content)
    #"""

# Get the back of the cards
r = requests.get("https://i.imgur.com/cI9uGt2.jpeg")
with open(f"./generated_packs/{pack_name}/cards/" + "Back.jpeg", 'wb') as file:
    file.write(r.content)


def get_oracle(name):
    cursor = connection.cursor()
    cursor.execute("SELECT oracle_text FROM images WHERE name = ?", (name,))
    result = cursor.fetchone()
    cursor.close()
    return result[0].replace('"', "'").replace("\n", "\\n") if result else None


# Generate the config file
with open(f"./generated_packs/{pack_name}/cards/config.cfg", "w") as file:
    file.write(f"""; Autogenerated asset pack for "{pack_name}" deck.
[*]
scale = Vector2(6.3, 8.8)

back_face = "Back.jpeg"
bounce = 0

[Back.jpeg]
ignore = true 

""" +
    "\n".join([f"""[{card[0]}.jpeg]\ndesc="{get_oracle(card[0])}"\n""" for card in decklist])
    )

with open(f"./generated_packs/{pack_name}/cards/stacks.cfg", "w") as file:
    file.write(f"""; The "{pack_name}" deck stored as a stack; Autogenerated
    
[Main deck of {pack_name}]
items = [{", ".join([", ".join(['"' + card[0].replace('"', "_") + '"']*card[1]) for card in decklist if card[1] > 0])}]
""" + (f"""
[Sideboard of {pack_name}]
items = [{", ".join([", ".join(['"' + card[0].replace('"', "_") + '"']*card[1]) for card in sideboard if card[1] > 0])}]
""" if sideboadring else ""))

connection.close()